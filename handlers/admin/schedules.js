
const dateUtils = require('../../utils/dateUtils');
const { Markup } = require('telegraf');


module.exports = {

    showSchedulesMenu: async(ctx) =>{

        ctx.session.userState.previousSteps.push('admin_menu');
        ctx.session.userState.step = 'create_schedule';
        
        var curentMonth = dateUtils.getCurrentMonth();
        var nextMonth = curentMonth + 1;

        await ctx.reply(`üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:`,
            Markup.keyboard([
                [dateUtils.parseMonth(curentMonth), dateUtils.parseMonth(nextMonth)],
                ['–î—Ä—É–≥–æ–π –º–µ—Å—è—Ü', 'üîô –ù–∞–∑–∞–¥']
            ]).resize()
        );
    },

    schedulesSetting (bot, adminCheck){

        bot.use((ctx, next) => {
            if (ctx.message?.text?.match(/–î—Ä—É–≥–æ–π –º–µ—Å—è—Ü|üì¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ|/i)) {
                return adminCheck(ctx, next);
            }
            return next();
        });

        bot.hears('–î—Ä—É–≥–æ–π –º–µ—Å—è—Ü', async (ctx) => {

            ctx.session.userState.previousSteps.push('create_schedule');
            ctx.session.userState.step = 'anotherMonth';
            const months = [];

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 12 –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥
            for (let i = 0; i < 12; i++) {
                months.push(dateUtils.parseMonth(i));
            }

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –º–µ—Å—è—Ü–∞
            const keyboard = [];
            while (months.length) {
                keyboard.push(months.splice(0, 3));
            }

            keyboard.push(['üîô –ù–∞–∑–∞–¥']);

            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤:',
                Markup.keyboard(keyboard).resize()
            );

        });


        bot.hears(/^(–Ø–Ω–≤–∞—Ä—å|–§–µ–≤—Ä–∞–ª—å|–ú–∞—Ä—Ç|–ê–ø—Ä–µ–ª—å|–ú–∞–π|–ò—é–Ω—å|–ò—é–ª—å|–ê–≤–≥—É—Å—Ç|–°–µ–Ω—Ç—è–±—Ä—å|–û–∫—Ç—è–±—Ä—å|–ù–æ—è–±—Ä—å|–î–µ–∫–∞–±—Ä—å) \d{4}$/, async (ctx) => {
            if (!ctx.session.scheduleState) return;

            const selectedMonth = ctx.message.text;
            ctx.session.scheduleState.selectedMonth = selectedMonth;

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–Ω–µ–π
            //await showDaySelection(ctx, selectedMonth);
        });


    }
}



